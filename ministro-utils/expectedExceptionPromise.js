/**
 * @param {!Function.<!Promise>} action.
 * @param {!Number | !string | !BigNumber} gasToUse.
 * @returns {!Promise} which throws unless it hit a valid error.
 */
module.exports = function expectedExceptionPromise(action, gasToUse) {
  let didThrow = false;
  return new Promise(((resolve, reject) => {
    try {
      resolve(action());
    } catch (e) {
      didThrow = true;
      reject(e);
    }
  }))
    .then((txObj) => {
      if (didThrow === false) throw new Error(`Action should throw: ${action.toString()}`);

      if (typeof txn === 'string') { return web3.eth.getTransactionReceiptMined(txObj); } // regular tx hash

      if (typeof txObj.receipt !== 'undefined') { return txObj.receipt; } // truffle-contract function call

      if (typeof txObj.transactionHash === 'string') { return web3.eth.getTransactionReceiptMined(txObj.transactionHash); } // deployment

      return txObj; // Unknown last case
    })
    .then(
      (receipt) => {
        // We are in Geth
        if (typeof receipt.status !== 'undefined') {
          // Byzantium
          assert.strictEqual(parseInt(receipt.status, 10), 0, 'should have reverted');
        } else {
          // Pre Byzantium
          assert.equal(receipt.gasUsed, gasToUse, 'should have used all the gas');
        }
      },
      (e) => {
        if ((`${e}`).indexOf('invalid JUMP') > -1
                        || (`${e}`).indexOf('out of gas') > -1
                        || (`${e}`).indexOf('invalid opcode') > -1
                        || (`${e}`).indexOf('revert') > -1) {
          // We are in TestRPC
        } else if ((`${e}`).indexOf('please check your gas amount') > -1) {
          // We are in Geth for a deployment
        } else if ((`${e}`).indexOf('Cannot send value to non-payable function') > -1) {
          // We are in ganache
        } else if ((`${e}`).indexOf('account not recognized') > -1) {
          // Check if msg.sender exists and its not generated by random numbers
        } else {
          throw e;
        }
      },
    );
};
